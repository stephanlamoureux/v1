{"mappings":"kpBAsBA,IAAAA,EACAC,E,iJArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,4J,MCAzDC,EAAiB,IAAAC,IAAoBL,EAAA,SAAAM,QAA6C,SAAAC,OAAAC,KAAAC,KAAUC,W,MCA5FC,EAAiB,IAAAN,IAAoBL,EAAA,SAAAM,QAA6C,SAAAC,OAAAC,KAAAC,KAAUC,WCQ5F,MAAME,EAAaC,SAASC,iBAAiB,aACvCC,EAAQF,SAASC,iBAAiB,SAClCE,EAAYH,SAASI,cAAc,mBACnCC,EAAOL,SAASI,cAAc,SAgBpCL,EAAWO,SAAQC,IAClBA,EAASC,iBAAiB,UAAU,KACnCR,SAASS,KAAKC,UAAUC,OAAO,cAE3BX,SAASS,KAAKC,UAAUE,SAAS,eACpCC,aAAaC,QAAQ,YAAa,WAClCZ,EAAMI,SAAQS,IACbA,EAAKC,MAAMC,UAAY,uBAExBd,EAAUe,IAAMC,EAAArB,GAChBO,EAAKW,MAAMI,YAAY,eAAgB,WAEvCP,aAAaC,QAAQ,YAAa,YAClCZ,EAAMI,SAAQS,IACbA,EAAKC,MAAMK,WAAa,wBACxBN,EAAKC,MAAMC,UAAY,qBAExBd,EAAUe,IAAMC,EAAA5B,GAChBc,EAAKW,MAAMI,YAAY,eAAgB,QACxC,IAMyC,YAAtCP,aAAaS,QAAQ,cACxBtB,SAASS,KAAKC,UAAUa,IAAI,cAC5BrB,EAAMI,SAAQS,IACbA,EAAKC,MAAMK,WAAa,OACxBN,EAAKC,MAAMC,UAAY,uBAExBd,EAAUe,IAAMC,EAAArB,GAChBO,EAAKW,MAAMI,YAAY,eAAgB,WAEvClB,EAAMI,SAAQS,IACbA,EAAKC,MAAMC,UAAY,qBAExBd,EAAUe,IAAMC,EAAA5B,GAChBc,EAAKW,MAAMI,YAAY,eAAgB,QACxC,IAID,MAAMI,EAAYxB,SAASC,iBAAiB,cACtCwB,EAASzB,SAASI,cAAc,wBAChCsB,EAAO1B,SAASI,cAAc,sBAC9BuB,EAAS3B,SAASI,cAAc,uBAChCwB,EAAM5B,SAAS6B,eAAe,eAC9BC,EAAY9B,SAASI,cAAc,2BAIzC,SAAS2B,IACRD,EAAUpB,UAAUC,OAAO,aAC3Bc,EAAOf,UAAUC,OAAO,UACzB,CALAe,EAAKlB,iBAAiB,QAASuB,GAQ/BP,EAAUlB,SAAQ,SAAU0B,GAC3BA,EAASxB,iBAAiB,QAASuB,EACpC,IAGA/B,SAASQ,iBAAiB,SAASyB,IACVL,EAAIhB,SAASqB,EAAMC,UAE1CT,EAAOf,UAAUyB,OAAO,WACxBL,EAAUpB,UAAUyB,OAAO,aAC5B,IAIDV,EAAOjB,iBAAiB,UAAUyB,IACdN,EAAOf,SAASqB,EAAMC,UAExCT,EAAOf,UAAUa,IAAI,WACrBO,EAAUpB,UAAUa,IAAI,aACzB","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-7f89f399f8c782cc.js","node_modules/@parcel/runtime-js/lib/runtime-e8834ec2e76f3550.js","node_modules/@parcel/runtime-js/lib/runtime-73c7b126c37bbce7.js","scripts/about.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"xku0h\\\":\\\"index.29d18492.js\\\",\\\"4z28O\\\":\\\"light-arrow.490d09b9.webp\\\",\\\"35Fnx\\\":\\\"dark-arrow.b2df8ca6.webp\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4z28O\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"35Fnx\")).toString();","// import gtag, { install } from 'ga-gtag'\nimport darkArrow from '/assets/images/icons/light-arrow.webp'\nimport lightArrow from '/assets/images/icons/dark-arrow.webp'\n\n// Google Analytics\n// install('G-YYTQ7PKV12')\n\n// Light Mode\nconst checkboxes = document.querySelectorAll('.checkbox')\nconst balls = document.querySelectorAll('.ball')\nconst downArrow = document.querySelector('.scribble-image')\nconst root = document.querySelector(':root')\n\n/*\nEvent listeners for the toggle switches on the desktop nav and mobile nav.\n\nThe default mode is dark, so when the toggle is checked:\n1. Light mode stylesheet is enabled\n2. Local storage is updated to \"light mode: enabled\"\n3. The ball on both the desktop and mobile toggle is slid to the left\n\nWhen the toggle is unchecked:\n1. Light mode stylesheet is disabled\n2. Local storage is updated to \"light mode: disabled\"\n3. The ball on both the desktop and mobile toggle is slid to the right\n*/\n\ncheckboxes.forEach(checkbox => {\n\tcheckbox.addEventListener('change', () => {\n\t\tdocument.body.classList.toggle('light-mode')\n\n\t\tif (document.body.classList.contains('light-mode')) {\n\t\t\tlocalStorage.setItem('lightMode', 'enabled')\n\t\t\tballs.forEach(ball => {\n\t\t\t\tball.style.transform = 'translateX(-24px)'\n\t\t\t})\n\t\t\tdownArrow.src = lightArrow\n\t\t\troot.style.setProperty('color-scheme', 'light')\n\t\t} else {\n\t\t\tlocalStorage.setItem('lightMode', 'disabled')\n\t\t\tballs.forEach(ball => {\n\t\t\t\tball.style.transition = 'transform 0.2s linear'\n\t\t\t\tball.style.transform = 'translateX(0px)'\n\t\t\t})\n\t\t\tdownArrow.src = darkArrow\n\t\t\troot.style.setProperty('color-scheme', 'dark')\n\t\t}\n\t})\n\n\t// If the user has previously checked the light mode toggle\n\t// the page will load in light mode and vice versa using the same logic as above.\n\n\tif (localStorage.getItem('lightMode') === 'enabled') {\n\t\tdocument.body.classList.add('light-mode')\n\t\tballs.forEach(ball => {\n\t\t\tball.style.transition = 'none'\n\t\t\tball.style.transform = 'translateX(-24px)'\n\t\t})\n\t\tdownArrow.src = lightArrow\n\t\troot.style.setProperty('color-scheme', 'light')\n\t} else {\n\t\tballs.forEach(ball => {\n\t\t\tball.style.transform = 'translateX(0px)'\n\t\t})\n\t\tdownArrow.src = darkArrow\n\t\troot.style.setProperty('color-scheme', 'dark')\n\t}\n})\n\n// Mobile Nav\nconst menuLinks = document.querySelectorAll('.menu-link')\nconst navbar = document.querySelector('.nav-wrapper .navbar')\nconst menu = document.querySelector('.nav-wrapper .menu')\nconst toggle = document.querySelector('.mobile-mode-toggle')\nconst nav = document.getElementById('nav-wrapper')\nconst hamburger = document.querySelector('.nav-wrapper .hamburger')\n\nmenu.addEventListener('click', toggleMenu)\n\nfunction toggleMenu() {\n\thamburger.classList.toggle('is-active')\n\tnavbar.classList.toggle('showNav')\n}\n\n// Close the menu when a link is clicked\nmenuLinks.forEach(function (menuLink) {\n\tmenuLink.addEventListener('click', toggleMenu)\n})\n\n// Close the mobile nav menu when you click outside of it\ndocument.addEventListener('click', event => {\n\tconst isClickedInside = nav.contains(event.target)\n\tif (!isClickedInside) {\n\t\tnavbar.classList.remove('showNav')\n\t\thamburger.classList.remove('is-active')\n\t}\n})\n\n// Keep the mobile nav menu open when the color mode toggle is clicked\nnavbar.addEventListener('change', event => {\n\tconst modeToggle = toggle.contains(event.target)\n\tif (!modeToggle) {\n\t\tnavbar.classList.add('showNav')\n\t\thamburger.classList.add('is-active')\n\t}\n})\n"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$f1663a2a36adc672$exports","URL","resolve","import","meta","url","toString","$e6c73cbecad4af6d$exports","$c5d12d0439a258e4$var$checkboxes","document","querySelectorAll","$c5d12d0439a258e4$var$balls","$c5d12d0439a258e4$var$downArrow","querySelector","$c5d12d0439a258e4$var$root","forEach","checkbox","addEventListener","body","classList","toggle","contains","localStorage","setItem","ball","style","transform","src","$parcel$interopDefault","setProperty","transition","getItem","add","$c5d12d0439a258e4$var$menuLinks","$c5d12d0439a258e4$var$navbar","$c5d12d0439a258e4$var$menu","$c5d12d0439a258e4$var$toggle","$c5d12d0439a258e4$var$nav","getElementById","$c5d12d0439a258e4$var$hamburger","$c5d12d0439a258e4$var$toggleMenu","menuLink","event","target","remove"],"version":3,"file":"index.29d18492.js.map"}