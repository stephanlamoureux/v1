{"mappings":"YAAO,MAAMA,EAAQ,CACjBC,QAAS,2BCDAC,EAAiB,CAACC,EAAWC,EAAWC,KACjD,IAAKF,EACD,KAAM,gFAEV,IAAKC,EACD,KAAM,wEAEV,IAAKC,EACD,KAAM,mFAEV,OAAO,GCVJ,MAAMC,EACTC,YAAYC,GACRC,KAAKC,OAASF,EAAaE,OAC3BD,KAAKE,KAAOH,EAAaI,cCD1B,MAAMC,EAAW,CAACC,EAAKC,EAAMC,EAAU,KACnC,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,QAAQ,EAACC,OAAEA,MAC5B,MAAMC,EAAiB,IAAIlB,EAAsBiB,GACnB,MAA1BC,EAAed,QAA0C,OAAxBc,EAAeb,KAChDO,EAAQM,GAGRL,EAAOK,MAGfJ,EAAIE,iBAAiB,SAAS,EAACC,OAAEA,MAC7BJ,EAAO,IAAIb,EAAsBiB,OAErCH,EAAIK,KAAK,OAAQzB,EAAMC,QAAUa,GAAK,GACtCY,OAAOC,KAAKX,GAASY,SAASC,IAC1BT,EAAIU,iBAAiBD,EAAKb,EAAQa,OAEtCT,EAAIW,KAAKhB,M,ICjBjBiB,EAAe,C,KCEK,CAAC7B,EAAW8B,EAAS,6BACrCjC,EAAMkC,QAAU/B,EAChBH,EAAMC,QAAUgC,G,KCGA,CAAC7B,EAAWC,EAAY8B,EAAehC,KACvD,MAAMiC,EAAMjC,GAAaH,EAAMkC,QAC/BhC,EAAekC,EAAKhC,EAAWC,GAC/B,MAAMgC,EAAS,CACXC,YAAa,QACbC,QAASH,EACTI,WAAYpC,EACZqC,YAAapC,EACbqC,gBAAiBP,GAErB,OAAOtB,EAAS,uBAAwB8B,KAAKC,UAAUP,GAAS,CAC5D,eAAgB,sB,SCEA,CAACjC,EAAWC,EAAYwC,EAAM1C,KAClD,MAAMiC,EAAMjC,GAAaH,EAAMkC,QACzBY,EAvBW,CAACD,IAClB,IAAIC,EAOJ,GALIA,EADgB,iBAATD,EACOE,SAASC,cAAcH,GAGvBA,GAEbC,GAAwC,SAAzBA,EAAYG,SAC5B,KAAM,0FAEV,OAAOH,GAYaI,CAAaL,GACjC3C,EAAekC,EAAKhC,EAAWC,GAC/B,MAAM8C,EAAW,IAAIC,SAASN,GAK9B,OAJAK,EAASE,OAAO,cAAe,SAC/BF,EAASE,OAAO,aAAcjD,GAC9B+C,EAASE,OAAO,cAAehD,GAC/B8C,EAASE,OAAO,UAAWjB,GACpBvB,EAAS,4BAA6BsC,KC9B/CnB,EAAQsB,KAAK,8BAGfC,OAAOC,OAAS,WACdT,SAASU,eAAe,gBAAgBnC,iBAAiB,UAAU,SAAUoC,GAC3EA,EAAMC,iBACiBZ,SAASU,eAAe,UAAUG,MAAQ,aAEjEnD,KAAKoD,eAAeD,MAAyB,IAAjBE,KAAMC,SAAqB,EAEvD/B,EAAQgC,SAAS,kBAAmB,eAAgBvD,MAAMwD,MACxD,WACwBlB,SAASU,eAAe,UAAUG,MAAQ,WACzCb,SAASU,eAAe,UAAUS,MAAMC,QAC7D,yFACFC,QAAQC,IAAI,YACZC,YAAW,WACTvB,SAASwB,MAAM,gBAAgBC,QAC/BzB,SAASU,eAAe,UAAUG,MAAQ,SAC1Cb,SAASU,eAAe,UAAUS,MAAQ,KACzC,QAEL,SAAUO,GACc1B,SAASU,eAAe,UAAUG,MAAQ,UACzCb,SAASU,eAAe,UAAUS,MAAMQ,WAC7D,qBACFN,QAAQC,IAAI,YAAaI,GACzBH,YAAW,WACTvB,SAASwB,MAAM,gBAAgBC,QAC/BzB,SAASU,eAAe,UAAUG,MAAQ,SAC1Cb,SAASU,eAAe,UAAUS,MAAQ,KACzC,Y","sources":["node_modules/@emailjs/browser/es/store/store.js","node_modules/@emailjs/browser/es/utils/validateParams.js","node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","node_modules/@emailjs/browser/es/api/sendPost.js","node_modules/@emailjs/browser/es/index.js","node_modules/@emailjs/browser/es/methods/init/init.js","node_modules/@emailjs/browser/es/methods/send/send.js","node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","scripts/email.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.6.2',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.6.2');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import emailjs from '../node_modules/@emailjs/browser'\n;(function () {\n  // https://dashboard.emailjs.com/admin/integration\n  emailjs.init('user_hYeCfF0DkAoQPn3bOS7WR')\n})()\n\nwindow.onload = function () {\n  document.getElementById('contact-form').addEventListener('submit', function (event) {\n    event.preventDefault()\n    const sendingButton = (document.getElementById('submit').value = 'Sending...')\n    // generate a five digit number for the contact_number variable\n    this.contact_number.value = (Math.random() * 100000) | 0\n    // these IDs from the previous steps\n    emailjs.sendForm('contact_service', 'contact_form', this).then(\n      function () {\n        const submitButton = (document.getElementById('submit').value = 'Success!')\n        const successButton = (document.getElementById('submit').style.cssText =\n          'background: var(--dracula-green); color: var(--dracula-background); text-shadow: none;')\n        console.log('SUCCESS!')\n        setTimeout(function () {\n          document.forms['contact-form'].reset()\n          document.getElementById('submit').value = 'Submit'\n          document.getElementById('submit').style = ''\n        }, 5000)\n      },\n      function (error) {\n        const submitButton = (document.getElementById('submit').value = 'Failed!')\n        const successButton = (document.getElementById('submit').style.background =\n          'var(--dracula-red)')\n        console.log('FAILED...', error)\n        setTimeout(function () {\n          document.forms['contact-form'].reset()\n          document.getElementById('submit').value = 'Submit'\n          document.getElementById('submit').style = ''\n        }, 5000)\n      }\n    )\n  })\n}\n"],"names":["$b2ff3e22672f6eac$export$6f57813fe9f31bf9","_origin","$477571a3a5a18a43$export$1f3bf48e9edf7d72","publicKey","serviceID","templateID","$8ebb4b9331d869f4$export$29b488039e3d4c2d","constructor","httpResponse","this","status","text","responseText","$f9bc2fc89e115eb3$export$4a68059d3a005c64","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","$b3d61b8d8b0d7a23$export$2e2bcd8739ae039","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","form","currentForm","document","querySelector","nodeName","$cd35917ebbcbd1a2$var$findHTMLForm","formData","FormData","append","init","window","onload","getElementById","event","preventDefault","value","contact_number","Math","random","sendForm","then","style","cssText","console","log","setTimeout","forms","reset","error","background"],"version":3,"file":"contact.48da225c.js.map"}